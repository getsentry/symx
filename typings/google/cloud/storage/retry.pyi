"""
This type stub file was generated by pyright.
"""

"""Helpers for configuring retries with exponential back-off.

See [Retry Strategy for Google Cloud Storage](https://cloud.google.com/storage/docs/retry-strategy#client-libraries)
"""
_RETRYABLE_TYPES = ...
_RETRYABLE_STATUS_CODES = ...
DEFAULT_RETRY = ...

class ConditionalRetryPolicy:
    """A class for use when an API call is only conditionally safe to retry.

    This class is intended for use in inspecting the API call parameters of an
    API call to verify that any flags necessary to make the API call idempotent
    (such as specifying an ``if_generation_match`` or related flag) are present.

    It can be used in place of a ``retry.Retry`` object, in which case
    ``_http.Connection.api_request`` will pass the requested api call keyword
    arguments into the ``conditional_predicate`` and return the ``retry_policy``
    if the conditions are met.

    :type retry_policy: class:`google.api_core.retry.Retry`
    :param retry_policy: A retry object defining timeouts, persistence and which
        exceptions to retry.

    :type conditional_predicate: callable
    :param conditional_predicate: A callable that accepts exactly the number of
        arguments in ``required_kwargs``, in order, and returns True if the
        arguments have sufficient data to determine that the call is safe to
        retry (idempotent).

    :type required_kwargs: list(str)
    :param required_kwargs:
        A list of keyword argument keys that will be extracted from the API call
        and passed into the ``conditional predicate`` in order. For example,
        ``["query_params"]`` is commmonly used for preconditions in query_params.
    """
    def __init__(self, retry_policy, conditional_predicate, required_kwargs) -> None: ...
    def get_retry_policy_if_conditions_met(self, **kwargs):  # -> Any | None:
        ...

def is_generation_specified(query_params):  # -> bool:
    """Return True if generation or if_generation_match is specified."""
    ...

def is_metageneration_specified(query_params):  # -> bool:
    """Return True if if_metageneration_match is specified."""
    ...

def is_etag_in_data(data):  # -> bool:
    """Return True if an etag is contained in the request body.

    :type data: dict or None
    :param data: A dict representing the request JSON body. If not passed, returns False.
    """
    ...

def is_etag_in_json(data):  # -> bool:
    """
    ``is_etag_in_json`` is supported for backwards-compatibility reasons only;
    please use ``is_etag_in_data`` instead.
    """
    ...

DEFAULT_RETRY_IF_GENERATION_SPECIFIED = ...
DEFAULT_RETRY_IF_METAGENERATION_SPECIFIED = ...
DEFAULT_RETRY_IF_ETAG_IN_JSON = ...
